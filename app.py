import math

class Cell18650:
    def __init__(self, name, voltage, capacity, max_current, resistance):
        self.name = name
        self.v = voltage         # –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)
        self.ah = capacity       # —ë–º–∫–æ—Å—Ç—å –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ (–ê¬∑—á)
        self.i_max = max_current # –º–∞–∫—Å. —Ç–æ–∫ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ (–ê)
        self.r = resistance      # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–û–º)

# –¢–∏–ø—ã —è—á–µ–µ–∫ 18650 –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
TYPES = {
    "1": Cell18650("Panasonic NCR18650B (energy)", 3.6, 3.2, 6.5, 0.045),
    "2": Cell18650("Samsung 25R (power)", 3.6, 2.5, 20.0, 0.022),
    "3": Cell18650("LG HG2 (balanced)", 3.6, 3.0, 15.0, 0.030)
}

def ask_float(prompt):
    while True:
        try:
            value = input(prompt).replace(',', '.')
            return float(value)
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

def select_cell():
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø 18650 —è—á–µ–π–∫–∏:")
    for key, cell in TYPES.items():
        print(f"  {key}) {cell.name}: {cell.v}–í, {cell.ah}–ê¬∑—á, {cell.i_max}–ê, {cell.r*1000:.0f} –º–û–º")
    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ")
        if choice in TYPES:
            return TYPES[choice]
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

def calculate_config(target_v, min_i, cell):
    print("\nüìä –†–∞—Å—á—ë—Ç...")

    # —à–∞–≥ 1: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ S
    s = math.ceil(target_v / cell.v)
    print(f"üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —è—á–µ–µ–∫ –≤ —Å–µ—Ä–∏–∏ (S): ceil({target_v} / {cell.v}) = {s}")

    # —à–∞–≥ 2: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ P –ø–æ —Ç–æ–∫—É
    p = math.ceil(min_i / cell.i_max)
    print(f"üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö (P): ceil({min_i} / {cell.i_max}) = {p}")

    # —à–∞–≥ 3: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
    r_total = s * (cell.r / p)
    v_nom = s * cell.v
    v_load = v_nom - min_i * r_total
    print(f"üîπ –ù–æ–º–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏: {s} * {cell.v} = {v_nom:.2f} –í")
    print(f"üîπ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞: R = {s} * ({cell.r:.3f} / {p}) = {r_total:.4f} –û–º")
    print(f"üîπ –ü—Ä–æ—Å–∞–¥–∫–∞ –ø—Ä–∏ {min_i} –ê: {min_i} * {r_total:.4f} = {min_i * r_total:.2f} –í")
    print(f"üîπ –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π: {v_nom:.2f} - –ø—Ä–æ—Å–∞–¥–∫–∞ = {v_load:.2f} –í")

    if v_load < target_v:
        print("‚ö†Ô∏è –ü—Ä–æ—Å–∞–¥–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, —É–≤–µ–ª–∏—á–∏–º S –∏–ª–∏ P...")
        while v_load < target_v:
            p += 1
            r_total = s * (cell.r / p)
            v_load = v_nom - min_i * r_total
        print(f"‚úÖ –ù–æ–≤–æ–µ P = {p} ‚Üí –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π = {v_load:.2f} –í")

    total_cells = s * p
    pack_capacity = p * cell.ah
    pack_energy = pack_capacity * v_nom
    print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {s}S{p}P")
    print(f"  –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}")
    print(f"  –Å–º–∫–æ—Å—Ç—å: {pack_capacity:.2f} –ê¬∑—á")
    print(f"  –≠–Ω–µ—Ä–≥–∏—è: ‚âà {pack_energy:.1f} –í—Ç¬∑—á")
    print(f"  –î–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–æ–∫: {p} * {cell.i_max} = {p * cell.i_max:.1f} –ê")

def main():
    print("=== üîã –ü–æ–¥–±–æ—Ä –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ 18650 (SxP) ===")
    target_v = ask_float("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í: ")
    min_i = ask_float("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–æ–∫ –Ω–∞–≥—Ä—É–∑–∫–∏, –ê: ")
    cell = select_cell()
    calculate_config(target_v, min_i, cell)

if __name__ == "__main__":
    main()
